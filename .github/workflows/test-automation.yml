name: Comprehensive Test Automation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  FORCE_COLOR: 1

jobs:
  # Unit Tests with Coverage
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace }}/package-lock.json
          
      - name: Install dependencies
        run: |
          cd ${{ matrix.workspace }}
          npm ci
          
      - name: Run unit tests with coverage
        run: |
          cd ${{ matrix.workspace }}
          if [ "${{ matrix.workspace }}" = "backend" ]; then
            npm run test:ci -- --coverage --testTimeout=10000
          else
            npm run test:coverage
          fi
        env:
          NODE_ENV: test
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ${{ matrix.workspace }}/coverage/lcov.info
          flags: ${{ matrix.workspace }}
          name: ${{ matrix.workspace }}-coverage
          fail_ci_if_error: false
          
      - name: Generate coverage report
        run: |
          cd ${{ matrix.workspace }}
          echo "## ${{ matrix.workspace }} Coverage Report" >> $GITHUB_STEP_SUMMARY
          if [ -f "coverage/coverage-summary.json" ]; then
            node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              console.log('| Metric | Coverage |');
              console.log('|--------|----------|');
              console.log('| Lines | ' + total.lines.pct + '% |');
              console.log('| Functions | ' + total.functions.pct + '% |');
              console.log('| Branches | ' + total.branches.pct + '% |');
              console.log('| Statements | ' + total.statements.pct + '% |');
            " >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.workspace }}
          path: ${{ matrix.workspace }}/coverage/
          retention-days: 7

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: foodtracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Run backend integration tests
        run: |
          cd backend
          npm run test:e2e
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/foodtracker_test
          JWT_SECRET: test-secret-key
          
      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: backend/test-results/
          retention-days: 7

  # E2E Tests with Multiple Browsers
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install ${{ matrix.browser }} --with-deps
          
      - name: Start services
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 30
          
      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3003/api/health; do sleep 5; done'
          
      - name: Run E2E tests
        run: |
          cd frontend
          npx playwright test --project=${{ matrix.browser }} --reporter=html
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.browser }}
          
      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            frontend/playwright-report-${{ matrix.browser }}/
            frontend/test-results/
          retention-days: 7
          
      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.test.yml down

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Install Playwright
        run: |
          cd frontend
          npx playwright install chromium --with-deps
          
      - name: Start services
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 30
          
      - name: Run performance tests
        run: |
          cd frontend
          npx playwright test --grep="@performance" --reporter=html
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report-performance
          
      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: frontend/playwright-report-performance/
          retention-days: 7
          
      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.test.yml down

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Install Playwright
        run: |
          cd frontend
          npx playwright install chromium --with-deps
          
      - name: Start services
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 30
          
      - name: Run accessibility tests
        run: |
          cd frontend
          npx playwright test --grep="@a11y" --reporter=html
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report-accessibility
          
      - name: Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-test-results
          path: frontend/playwright-report-accessibility/
          retention-days: 7
          
      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.test.yml down

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, accessibility-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate test summary
        run: |
          echo "# ðŸ§ª Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Unit test results
          echo "## Unit Tests" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Backend unit tests completed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Frontend unit tests completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Integration test results  
          echo "## Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Backend integration tests completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # E2E test results
          echo "## E2E Tests" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Chromium tests completed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Firefox tests completed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… WebKit tests completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Performance test results
          echo "## Performance Tests" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Performance benchmarks completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Accessibility test results
          echo "## Accessibility Tests" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… A11y compliance tests completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "ðŸ“Š All test artifacts are available for download in the Actions tab." >> $GITHUB_STEP_SUMMARY