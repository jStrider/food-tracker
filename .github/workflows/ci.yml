name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  POSTGRES_DB: foodtracker_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  JWT_SECRET: test-jwt-secret
  REDIS_URL: redis://localhost:6379
  # Test coverage thresholds
  BACKEND_COVERAGE_THRESHOLD: 80
  FRONTEND_COVERAGE_THRESHOLD: 80

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===============================
  # SECURITY & VULNERABILITY SCAN
  # ===============================
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.skip_security != 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 📊 Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 Run npm audit
        run: |
          # Backend audit
          cd backend && npm audit --audit-level moderate || echo "Backend audit completed with warnings"
          # Frontend audit  
          cd ../frontend && npm audit --audit-level moderate || echo "Frontend audit completed with warnings"
          # Root audit
          cd .. && npm audit --audit-level moderate || echo "Root audit completed with warnings"

  # ===============================  
  # BACKEND CI/CD
  # ===============================
  backend:
    name: 🏗️ Backend CI
    runs-on: ubuntu-latest
    needs: [security]
    if: always() && (needs.security.result == 'success' || needs.security.result == 'skipped')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: foodtracker_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json

      - name: 📋 Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: 🔧 Setup test environment
        run: |
          cd backend
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/foodtracker_test" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "JWT_SECRET=test-secret-key-for-ci" >> .env.test

      - name: 🗄️ Run database migrations
        run: |
          cd backend
          NODE_ENV=test npm run db:migrate

      - name: 🔍 TypeScript type checking
        run: |
          cd backend
          npx tsc --noEmit

      - name: 🧹 ESLint checking
        run: |
          cd backend
          npm run lint

      - name: 🧪 Run unit tests with coverage
        run: |
          cd backend
          npm run test:cov
        env:
          NODE_ENV: test

      - name: 🔬 Run integration tests
        run: |
          cd backend
          npm run test:e2e
        env:
          NODE_ENV: test

      - name: 📊 Upload backend coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: ✅ Check coverage threshold
        run: |
          cd backend
          COVERAGE=$(grep -o 'Lines.*[0-9]*\.*[0-9]*%' coverage/lcov-report/index.html | grep -o '[0-9]*\.*[0-9]*' | head -1)
          echo "Backend coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < $BACKEND_COVERAGE_THRESHOLD" | bc -l) )); then
            echo "❌ Backend coverage $COVERAGE% is below threshold $BACKEND_COVERAGE_THRESHOLD%"
            exit 1
          fi
          echo "✅ Backend coverage $COVERAGE% meets threshold $BACKEND_COVERAGE_THRESHOLD%"

      - name: 🏗️ Build backend
        run: |
          cd backend
          npm run build

      - name: 💾 Cache backend build
        uses: actions/cache@v4
        with:
          path: backend/dist
          key: backend-build-${{ github.sha }}

  # ===============================
  # FRONTEND CI/CD  
  # ===============================
  frontend:
    name: 🎨 Frontend CI
    runs-on: ubuntu-latest
    needs: [security]
    if: always() && (needs.security.result == 'success' || needs.security.result == 'skipped')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json

      - name: 📋 Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: 🔍 TypeScript type checking
        run: |
          cd frontend
          npm run typecheck

      - name: 🧹 ESLint checking
        run: |
          cd frontend
          npm run lint

      - name: 🧪 Run unit tests with coverage
        run: |
          cd frontend
          npm run test:coverage

      - name: 📊 Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: ✅ Check coverage threshold
        run: |
          cd frontend
          COVERAGE=$(grep -E "Lines\s*:\s*[0-9.]+%" coverage/lcov-report/index.html | grep -o '[0-9.]*%' | head -1 | tr -d '%')
          echo "Frontend coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < $FRONTEND_COVERAGE_THRESHOLD" | bc -l) )); then
            echo "❌ Frontend coverage $COVERAGE% is below threshold $FRONTEND_COVERAGE_THRESHOLD%"
            exit 1
          fi
          echo "✅ Frontend coverage $COVERAGE% meets threshold $FRONTEND_COVERAGE_THRESHOLD%"

      - name: 🏗️ Build frontend
        run: |
          cd frontend
          npm run build

      - name: 💾 Cache frontend build
        uses: actions/cache@v4
        with:
          path: frontend/dist
          key: frontend-build-${{ github.sha }}

  # ===============================
  # SHARED PACKAGE CI
  # ===============================
  shared:
    name: 📦 Shared Package CI
    runs-on: ubuntu-latest
    needs: [security]
    if: always() && (needs.security.result == 'success' || needs.security.result == 'skipped')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            shared/package-lock.json

      - name: 📋 Install dependencies
        run: |
          npm ci
          cd shared && npm ci

      - name: 🔍 TypeScript type checking
        run: |
          cd shared
          npx tsc --noEmit

      - name: 🏗️ Build shared package
        run: |
          cd shared
          npm run build

      - name: 💾 Cache shared build
        uses: actions/cache@v4
        with:
          path: shared/dist
          key: shared-build-${{ github.sha }}

  # ===============================
  # E2E TESTING
  # ===============================
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend, shared]
    if: always() && needs.backend.result == 'success' && needs.frontend.result == 'success'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: foodtracker_e2e
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: 🎭 Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: 💾 Restore backend build
        uses: actions/cache@v4
        with:
          path: backend/dist
          key: backend-build-${{ github.sha }}

      - name: 💾 Restore frontend build
        uses: actions/cache@v4
        with:
          path: frontend/dist
          key: frontend-build-${{ github.sha }}

      - name: 🔧 Setup E2E environment
        run: |
          cd backend
          cp .env.example .env.e2e
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/foodtracker_e2e" >> .env.e2e
          echo "NODE_ENV=test" >> .env.e2e
          echo "JWT_SECRET=e2e-test-secret-key" >> .env.e2e
          echo "PORT=3001" >> .env.e2e

      - name: 🗄️ Setup E2E database
        run: |
          cd backend
          NODE_ENV=test npm run db:migrate
          NODE_ENV=test npm run db:seed

      - name: 🚀 Start backend server
        run: |
          cd backend
          NODE_ENV=test npm run start:prod &
          sleep 10
        env:
          NODE_ENV: test

      - name: 🎯 Run E2E tests
        run: |
          cd frontend
          npm run test:e2e
        env:
          CI: true

      - name: 📸 Upload E2E artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-artifacts
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 7

  # ===============================
  # PERFORMANCE & LIGHTHOUSE
  # ===============================
  lighthouse:
    name: 🚀 Performance & Lighthouse
    runs-on: ubuntu-latest
    needs: [e2e]
    if: always() && needs.e2e.result == 'success' && github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: 🏗️ Build for production
        run: |
          cd frontend
          npm run build

      - name: 🚀 Run Lighthouse CI
        run: |
          cd frontend
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # ===============================
  # DOCKER BUILD & PUSH
  # ===============================
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [backend, frontend, shared]
    if: always() && needs.backend.result == 'success' && needs.frontend.result == 'success' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/foodtracker-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/foodtracker-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🎨 Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/foodtracker-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/foodtracker-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===============================
  # DEPLOYMENT NOTIFICATION
  # ===============================
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [backend, frontend, shared, e2e, docker]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: 🎉 Success notification
        if: needs.backend.result == 'success' && needs.frontend.result == 'success' && needs.e2e.result == 'success'
        run: |
          echo "✅ All CI/CD stages completed successfully!"
          echo "🏗️ Backend: ${{ needs.backend.result }}"
          echo "🎨 Frontend: ${{ needs.frontend.result }}"  
          echo "🎭 E2E Tests: ${{ needs.e2e.result }}"
          echo "🐳 Docker: ${{ needs.docker.result }}"

      - name: ❌ Failure notification
        if: needs.backend.result == 'failure' || needs.frontend.result == 'failure' || needs.e2e.result == 'failure'
        run: |
          echo "❌ CI/CD pipeline failed!"
          echo "🏗️ Backend: ${{ needs.backend.result }}"
          echo "🎨 Frontend: ${{ needs.frontend.result }}"
          echo "🎭 E2E Tests: ${{ needs.e2e.result }}"
          exit 1