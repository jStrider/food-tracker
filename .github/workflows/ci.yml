name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  POSTGRES_DB: foodtracker_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  JWT_SECRET: test-jwt-secret
  REDIS_URL: redis://localhost:6379

jobs:
  test:
    name: Tests & Linting
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Lint backend
        run: npm run lint:backend
        
      - name: Lint frontend  
        run: npm run lint:frontend
        
      - name: TypeCheck backend
        run: |
          cd backend
          npm run typecheck
          
      - name: TypeCheck frontend
        run: |
          cd frontend
          npm run typecheck
        
      - name: Test backend
        run: npm run test:backend
        env:
          NODE_ENV: test
          
      - name: Test backend E2E
        run: |
          cd backend
          npm run test:e2e
        env:
          NODE_ENV: test
          
      - name: Test frontend
        run: npm run test:frontend
        
      - name: Build shared
        run: npm run build:shared
        
      - name: Build backend
        run: npm run build:backend
        
      - name: Build frontend
        run: npm run build:frontend

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: [test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Generate backend coverage
        run: |
          cd backend
          npm run test:ci
        env:
          NODE_ENV: test
          
      - name: Generate frontend coverage
        run: |
          cd frontend
          npm run test:coverage
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage
          flags: backend
          name: backend-coverage
          
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage
          
      - name: Coverage Quality Gate
        run: |
          # Backend coverage check (minimum 70%)
          BACKEND_COVERAGE=$(node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./backend/coverage/coverage-summary.json'));
            console.log(coverage.total.lines.pct);
          ")
          
          # Frontend coverage check (minimum 60%)
          FRONTEND_COVERAGE=$(node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./frontend/coverage/coverage-summary.json'));
            console.log(coverage.total.lines.pct);
          ")
          
          echo "Backend Coverage: ${BACKEND_COVERAGE}%"
          echo "Frontend Coverage: ${FRONTEND_COVERAGE}%"
          
          if (( $(echo "${BACKEND_COVERAGE} < 70" | bc -l) )); then
            echo "❌ Backend coverage (${BACKEND_COVERAGE}%) is below minimum 70%"
            exit 1
          fi
          
          if (( $(echo "${FRONTEND_COVERAGE} < 60" | bc -l) )); then
            echo "❌ Frontend coverage (${FRONTEND_COVERAGE}%) is below minimum 60%"
            exit 1
          fi
          
          echo "✅ Coverage requirements met"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Audit dependencies
        run: |
          cd backend && npm audit --audit-level moderate
          cd ../frontend && npm audit --audit-level moderate
          cd ../shared && npm audit --audit-level moderate
          
      - name: OWASP ZAP Security Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, coverage, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker images
        run: docker compose build
        
      - name: Test Docker stack
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 30
          docker compose -f docker-compose.test.yml down